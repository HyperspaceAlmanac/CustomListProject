CustomList<T>.- Opreator
NameSpace: CustomListImplementation

Overrides the "-" opreator for CustomList<T> objects.

C#:
public static CustomList<T> operator -(CustomList<T> left, CustomList<T> right);

###############
# Parameters
###############
left CustomList<T>
The CustomList<T> to remove T objects from.

right CustomList<T>
The CustomList<T> that specifies the values (does not need to be unique) to remove. 

###############
# Returns
###############
CustomList<T>
A new Customlist<T> object that is a deep copy of the left operand with the shared items in the right operand removed.

###############
# Examples
###############
// Simple Examples using the "-" operator

// Example of unique values in original list but other list has
// a unique value, a value that apperas twice, and a value that does not exist

using CustomListImplementation;

public Class Examples
{
	public static void Main()
	{
		// Create the CustomList<int> object to subtract from
		CustomList<int> originalList = new CustomList<int>();
		// Add in values 0-4
		for (int i = 0; i < 5; i++) {
			originalList.Add(i);
		}
		// Print out the original content of the CustomList
		Console.WriteLine("Left operand:");
		Console.WriteLine(originalList.ToString());
		
		// Creat the CustomList that specifies the values to remove
		CustomList<int> otherList = new CustomList<int>();
		otherList.Add(1);
		otherList.Add(3);
		otherList.Add(6); // Value that does not exist
		otherList.Add(3); // Duplicate value
		
		Console.WriteLine("Right operand:");
		Console.WriteLine(otherList);
		
		Console.WriteLine("Left operand - Right operand");
		CustomList<int> result = originalList - otherList;
		Console.WriteLine("Should just have 0, 2, and 4 left");
		Console.WriteLine(result);
		// To see output
		Console.ReadLine();
	}
}
/* This code example produces the following output

Left operand:
[0,1,2,3,4]
Right operand:
[1,3,6,3]
Left operand - Right operand
Should just have 0, 2, and 4 left
[0,2,4]

*/

// Example of multiple instaces of certain values in original list

using CustomListImplementation;

public Class Examples
{
	public static void Main()
	{
		// Create the CustomList<int> object to subtract from
		CustomList<int> originalList = new CustomList<int>();
		// Add in values 0-4
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 5; j++) {
				originalList.Add(j);
			}
		}
		// Print out the original content of the CustomList
		Console.WriteLine("Left operand:");
		Console.WriteLine(originalList.ToString());
		
		// Creat the CustomList that specifies the values to remove
		CustomList<int> otherList = new CustomList<int>();
		otherList.Add(1); // Remove first instance of 1
		otherList.Add(1); // Remove second instance of 1
		otherList.Add(2);
		otherList.Add(3);
		otherList.Add(6); // Value that does not exist
		otherList.Add(3);
		otherList.Add(1); // Remove last instane of 1
		
		Console.WriteLine("Right operand:");
		Console.WriteLine(otherList);
		
		Console.WriteLine("Left operand - Right operand");
		CustomList<int> result = originalList - otherList;
		Console.WriteLine("There should be three 0's, no 1's, two 2's, one 3, and three 4's");
		Console.WriteLine(result);
		// To see output
		Console.ReadLine();
	}
}
/* This code example produces the following output

Left operand:
[0,1,2,3,4,0,1,2,3,4,0,1,2,3,4]
Right operand:
[1,1,2,3,6,3,1]
Left operand - Right operand
There should be three 0's, no 1's, two 2's, one 3, and three 4's
[0,4,0,2,4,0,2,3,4]

*/


###############
# Remarks
###############

Returns a deep copy of the left operand CustomList<T> with values in the right operand CustomList<T> removed.
For each value (including duplicates) in the right operand, try to remove the first instance of it from the left operand.
Return the remaining values in the left operand in a CustomList<T> object.

The returned CustomList<T> object will retain the original Capacity value of the left operand.

###############
# Applies to
###############

Product : Versions
.NET: 5.0
.NET Core : 1.0, 1.1, 2.0, 2.1, 2.2, 3.0, 3.1
.NET Framework : 1.1, 2.0, 3.0, 3.5, 4.0, 4.5, 4.5.1, 4.5.2, 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1, 4.7.2, 4.8
.NET Standard : 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 2.0, 2.1
UWP	10.0
Xamarin.Android : 7.1
Xamarin.iOS : 10.8
Xamarin.Mac : 3.0